# .github/workflows/deploy.yml

name: Deploy Mosla Pioneers App

on:
  push:
    branches:
      - main # This workflow runs every time you push to the 'main' branch

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: adhamelgohary02/mosla-pioneers:${{ github.sha }} # Tags image with your username and a unique ID

      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            # Create Docker secrets on the server. The "|| true" part prevents errors if they already exist.
            echo "${{ secrets.DB_PASSWORD }}" | docker secret create db_password - || true
            echo "${{ secrets.DB_ROOT_PASSWORD }}" | docker secret create db_root_password - || true
            echo "${{ secrets.FLASK_SECRET_KEY }}" | docker secret create flask_secret_key - || true

            # Clone the repository if it doesn't exist
            APP_DIR=~/mosla-pioneers-app
            GIT_REPO_URL="https://AdhamElgohary:${{ secrets.GH_PAT }}@github.com/AdhamElgohary/Mosla-Pionners.git"
            if [ ! -d "$APP_DIR" ]; then
              git clone "$GIT_REPO_URL" "$APP_DIR"
            fi

            # Navigate into the app directory and pull the latest changes
            cd "$APP_DIR"
            git pull origin main

            # Export the unique image tag as an environment variable
            # This is how the docker-compose.yml file knows which new image to use
            export TAG=${{ github.sha }}

            # Deploy the application stack using the docker-compose file
            echo "Deploying stack with image tag: $TAG"
            docker stack deploy --compose-file docker-compose.yml --with-registry-auth mosla-stack